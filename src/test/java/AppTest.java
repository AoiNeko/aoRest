/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.google.common.collect.Maps;
import org.junit.Test;

import java.util.*;

import static junit.framework.TestCase.assertNotNull;


public class AppTest {
    @Test
    public void testAppHasAGreeting() {

    }


    public int[] twoSum(int[] nums, int target) {
        int i = 0;
        int length = nums.length;
        while (i < length) {
            int j = i + 1;
            while (j < length) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
                j++;
            }
            i++;
        }

        return null;
    }

    public class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
        }
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int firstVal = (l1 == null ? 0 : l1.val) + (l2 == null ? 0:l2.val);
        boolean isOver = firstVal > 9;
        ListNode firstNode = new ListNode((firstVal) % 10);
        ListNode tempNode = firstNode;
        while (l1 != null || l2 != null) {
            l1 =l1 == null ? null : l1.next;
            l2 =l2 == null ? null : l2.next;
            if(l1 == null && l2 == null) continue;
            int val = (l1 == null ? 0 : l1.val) + (l2 == null ? 0:l2.val);
            if (isOver)  val++;
            isOver = val > 9;
            ListNode thisNode = new ListNode((val) % 10);
            tempNode.next = thisNode;
            tempNode = thisNode;
        }

        if (isOver) tempNode.next = new ListNode(1);
        return firstNode;
    }

    public int lengthOfLongestSubstring(String s) {
        StringBuilder sb = new StringBuilder();
        int longestLength = 0;
        for (int i = 0; i < s.length(); i++) {
            String o = String.valueOf(s.charAt(i));
            if (sb.indexOf(o) >= 0) {
                String temp = sb.substring(sb.indexOf(o) + 1);
                sb.delete(0, sb.length());
                sb.append(temp);
            }
            sb = sb.append(o);
            longestLength = sb.length() > longestLength ? sb.length() : longestLength;
        }
        return longestLength;
    }

    @Test
    public void runtest () {
        lengthOfLongestSubstring("abcabcbb");
    }

    @Test
    public void test() {
        Calendar calendar = Calendar.getInstance();
        System.out.println(1<< calendar.get(Calendar.DAY_OF_WEEK)-1);

    }

    @Test
    public void testMapOper() {
        Map h = new HashMap() {{
            put("1",2);
            put("2",3);
        }} ;

        operMap(Maps.newHashMap(h));
        System.out.printf(""+ h);
    }

    private void operMap(Map h) {
        h.remove("1");
    }
}
